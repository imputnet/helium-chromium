--- a/chrome/browser/ui/ui_features.cc
+++ b/chrome/browser/ui/ui_features.cc
@@ -120,7 +120,7 @@ BASE_FEATURE(KScrimForTabModal,
              "ScrimForTabModal",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
-BASE_FEATURE(kSideBySide, "SideBySide", base::FEATURE_DISABLED_BY_DEFAULT);
+BASE_FEATURE(kSideBySide, "SideBySide", base::FEATURE_ENABLED_BY_DEFAULT);
 
 // The delay before showing the drop target for the side-by-side drag-and-drop
 // entrypoint.
@@ -128,22 +128,22 @@ BASE_FEATURE_PARAM(base::TimeDelta,
                    kSideBySideShowDropTargetDelay,
                    &kSideBySide,
                    "drop_target_show_delay",
-                   base::Milliseconds(500));
+                   base::Milliseconds(250));
 BASE_FEATURE_PARAM(int,
                    kSideBySideDropTargetMinWidth,
                    &kSideBySide,
                    "drop_target_min_width",
-                   120);
+                   50);
 BASE_FEATURE_PARAM(int,
                    kSideBySideDropTargetMaxWidth,
                    &kSideBySide,
                    "drop_target_max_width",
-                   360);
+                   80);
 BASE_FEATURE_PARAM(int,
                    kSideBySideDropTargetTargetWidthPercentage,
                    &kSideBySide,
                    "drop_target_width_percentage",
-                   30);
+                   5);
 
 constexpr base::FeatureParam<MiniToolbarActiveConfiguration>::Option
     kMiniToolbarActiveConfigurationOptions[] = {
@@ -169,7 +169,7 @@ BASE_FEATURE_PARAM(int,
 // startup.
 BASE_FEATURE(kSideBySideSessionRestore,
              "SideBySideSessionRestore",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 bool IsRestoringSplitViewEnabled() {
   return base::FeatureList::IsEnabled(features::kSideBySide) &&
--- a/chrome/browser/ui/views/frame/multi_contents_resize_area.cc
+++ b/chrome/browser/ui/views/frame/multi_contents_resize_area.cc
@@ -21,9 +21,9 @@
 
 namespace {
 const int kHandleCornerRadius = 2;
-const int kHandleHeight = 24;
-const int kHandlePadding = 6;
-const int kHandleWidth = 4;
+const int kHandleHeight = 32;
+const int kHandlePadding = 1;
+const int kHandleWidth = 2;
 }  // namespace
 
 DEFINE_CLASS_ELEMENT_IDENTIFIER_VALUE(MultiContentsResizeHandle,
--- a/chrome/browser/ui/views/frame/multi_contents_view.h
+++ b/chrome/browser/ui/views/frame/multi_contents_view.h
@@ -24,7 +24,6 @@ class MultiContentsDropTargetView;
 class MultiContentsResizeArea;
 class MultiContentsViewDelegate;
 class MultiContentsViewDropTargetController;
-class MultiContentsViewMiniToolbar;
 
 namespace content {
 class WebContents;
@@ -58,7 +57,7 @@ class MultiContentsView : public views::
     double drop_target_width = 0;
   };
 
-  static constexpr int kSplitViewContentInset = 8;
+  static constexpr int kSplitViewContentInset = 0;
 
   MultiContentsView(BrowserView* browser_view,
                     std::unique_ptr<MultiContentsViewDelegate> delegate);
@@ -133,12 +132,6 @@ class MultiContentsView : public views::
     return *drop_target_controller_;
   }
 
-  gfx::Insets& start_contents_view_inset() {
-    return start_contents_view_inset_;
-  }
-
-  gfx::Insets& end_contents_view_inset() { return end_contents_view_inset_; }
-
   bool is_drag_and_drop_enabled() const { return is_drag_and_drop_enabled_; }
 
   void set_min_contents_width_for_testing(int width) {
@@ -157,10 +150,6 @@ class MultiContentsView : public views::
     return contents_container_views_[1]->GetContentsView();
   }
 
-  MultiContentsViewMiniToolbar* mini_toolbar_for_testing(int index) const {
-    return contents_container_views_[index]->GetMiniToolbar();
-  }
-
  private:
   static constexpr int kMinWebContentsWidth = 200;
   static constexpr double kMinWebContentsWidthPercentage = 0.1;
@@ -226,10 +215,6 @@ class MultiContentsView : public views::
   // Nullopt if not currently resizing.
   std::optional<double> initial_start_width_on_resize_;
 
-  // Insets of the start and end contents view when in split view
-  gfx::Insets start_contents_view_inset_;
-  gfx::Insets end_contents_view_inset_;
-
   bool show_inactive_scrim_ = false;
 
   // This is needed because drag and drop is broken on Wayland. Once that is
--- a/chrome/browser/resources/tab_search/split_view/app.css
+++ b/chrome/browser/resources/tab_search/split_view/app.css
@@ -50,7 +50,7 @@ picture {
 
 .body {
   align-self: center;
-  color: var(--cr-primary-text-color);
+  color: var(--cr-secondary-text-color);
   font-size: 14px;
   font-weight: 400;
   line-height: 20px;
--- a/chrome/browser/ui/views/frame/multi_contents_view.cc
+++ b/chrome/browser/ui/views/frame/multi_contents_view.cc
@@ -19,7 +19,6 @@
 #include "chrome/browser/ui/views/frame/multi_contents_resize_area.h"
 #include "chrome/browser/ui/views/frame/multi_contents_view_delegate.h"
 #include "chrome/browser/ui/views/frame/multi_contents_view_drop_target_controller.h"
-#include "chrome/browser/ui/views/frame/multi_contents_view_mini_toolbar.h"
 #include "chrome/browser/ui/views/frame/scrim_view.h"
 #include "chrome/browser/ui/views/frame/top_container_background.h"
 #include "chrome/browser/ui/views/new_tab_footer/footer_web_view.h"
@@ -42,11 +41,7 @@ MultiContentsView::MultiContentsView(
     BrowserView* browser_view,
     std::unique_ptr<MultiContentsViewDelegate> delegate)
     : browser_view_(browser_view),
-      delegate_(std::move(delegate)),
-      start_contents_view_inset_(
-          gfx::Insets(kSplitViewContentInset).set_top(0).set_right(0)),
-      end_contents_view_inset_(
-          gfx::Insets(kSplitViewContentInset).set_top(0).set_left(0)) {
+      delegate_(std::move(delegate)) {
 #if BUILDFLAG(IS_OZONE)
   if (!ui::OzonePlatform::GetInstance()
            ->GetPlatformProperties()
@@ -233,11 +228,8 @@ void MultiContentsView::OnResize(int res
         std::make_optional(contents_container_views_[0]->size().width());
   }
   double total_width = contents_container_views_[0]->size().width() +
-                       contents_container_views_[0]->GetInsets().width() +
-                       contents_container_views_[1]->size().width() +
-                       contents_container_views_[1]->GetInsets().width();
+                       contents_container_views_[1]->size().width();
   double end_width = (initial_start_width_on_resize_.value() +
-                      contents_container_views_[0]->GetInsets().width() +
                       static_cast<double>(resize_amount));
 
   // If end_width is within the snap point widths, update to the snap point.
@@ -343,11 +335,6 @@ views::ProposedLayout MultiContentsView:
     }
   }
 
-  if (IsInSplitView()) {
-    start_rect.Inset(start_contents_view_inset_);
-    end_rect.Inset(end_contents_view_inset_);
-  }
-
   layouts.child_layouts.emplace_back(contents_container_views_[0],
                                      contents_container_views_[0]->GetVisible(),
                                      start_rect);
@@ -376,8 +363,10 @@ MultiContentsView::ViewWidths MultiConte
     widths.resize_width = resize_area_->GetPreferredSize().width();
     widths.start_width =
         start_ratio_ * (available_space.width() - widths.resize_width);
+
+    // +1 to overcorrect for rounding errors that cause a gap on the very edge
     widths.end_width =
-        available_space.width() - widths.start_width - widths.resize_width;
+        available_space.width() - widths.start_width - widths.resize_width + 1;
   } else {
     CHECK(!contents_container_views_[1]->GetVisible());
     widths.drop_target_width =
--- a/chrome/browser/ui/views/frame/contents_container_view.cc
+++ b/chrome/browser/ui/views/frame/contents_container_view.cc
@@ -14,7 +14,6 @@
 #include "chrome/browser/ui/views/frame/browser_view.h"
 #include "chrome/browser/ui/views/frame/contents_separator.h"
 #include "chrome/browser/ui/views/frame/contents_web_view.h"
-#include "chrome/browser/ui/views/frame/multi_contents_view_mini_toolbar.h"
 #include "chrome/browser/ui/views/frame/scrim_view.h"
 #include "chrome/browser/ui/views/new_tab_footer/footer_web_view.h"
 #include "chrome/common/chrome_features.h"
@@ -30,18 +29,8 @@
 #include "ui/views/layout/proposed_layout.h"
 #include "ui/views/view_class_properties.h"
 
-#if BUILDFLAG(ENABLE_GLIC)
-#include "chrome/browser/glic/browser_ui/glic_border_view.h"
-#include "chrome/browser/glic/glic_enabling.h"
-#endif
-
 namespace {
-constexpr float kContentCornerRadius = 6;
-constexpr gfx::RoundedCornersF kContentRoundedCorners{kContentCornerRadius};
-
-constexpr int kContentOutlineCornerRadius = 8;
-constexpr int kContentOutlineThickness = 1;
-constexpr int kSplitViewContentPadding = 4;
+constexpr gfx::RoundedCornersF kContentRoundedCorners{0};
 
 constexpr int kNewTabFooterSeparatorHeight = 1;
 constexpr int kNewTabFooterHeight = 56;
@@ -78,89 +67,25 @@ ContentsContainerView::ContentsContainer
         AddChildView(std::make_unique<ScrimView>(kColorSplitViewScrim));
     inactive_split_scrim_view_->SetRoundedCorners(kContentRoundedCorners);
   }
-
-  if (features::kGlicActorUiOverlay.Get()) {
-    auto actor_overlay_view = std::make_unique<views::View>();
-    actor_overlay_view->SetID(VIEW_ID_ACTOR_OVERLAY);
-    actor_overlay_view->SetVisible(false);
-    actor_overlay_view->SetLayoutManager(std::make_unique<views::FillLayout>());
-    actor_overlay_view_ = AddChildView(std::move(actor_overlay_view));
-  }
-
-#if BUILDFLAG(ENABLE_GLIC)
-  if (glic::GlicEnabling::IsProfileEligible(browser_view->GetProfile())) {
-    glic_border_ =
-        AddChildView(views::Builder<glic::GlicBorderView>(
-                         glic::GlicBorderView::Factory::Create(
-                             browser_view->browser(), contents_view_))
-                         .SetVisible(false)
-                         .SetCanProcessEventsWithinSubtree(false)
-                         .Build());
-  }
-#endif
-
-  if (base::FeatureList::IsEnabled(features::kSideBySide)) {
-    mini_toolbar_ = AddChildView(std::make_unique<MultiContentsViewMiniToolbar>(
-        browser_view, contents_view_));
-  }
 }
 
 void ContentsContainerView::UpdateBorderAndOverlay(bool is_in_split,
                                                    bool is_active,
                                                    bool show_scrim) {
   is_in_split_ = is_in_split;
-  // The border, mini toolbar, and scrim should not be visible if not in a
-  // split.
-  if (!is_in_split) {
-    SetBorder(nullptr);
-    ClearBorderRoundedCorners();
-    mini_toolbar_->SetVisible(false);
+
+  SetBorder(nullptr);
+  ClearBorderRoundedCorners();
+
+  if (is_in_split) {
+    inactive_split_scrim_view_->SetVisible(!is_active && show_scrim);
+  } else {
     inactive_split_scrim_view_->SetVisible(false);
-    return;
   }
-
-  // Draw active/inactive outlines around the contents areas and updates mini
-  // toolbar visibility.
-  const SkColor color =
-      is_active ? GetColorProvider()->GetColor(
-                      kColorMulitContentsViewActiveContentOutline)
-                : GetColorProvider()->GetColor(
-                      kColorMulitContentsViewInactiveContentOutline);
-  SetBorder(views::CreatePaddedBorder(
-      views::CreateRoundedRectBorder(kContentOutlineThickness,
-                                     kContentOutlineCornerRadius, color),
-      gfx::Insets(kSplitViewContentPadding)));
-
-  UpdateBorderRoundedCorners();
-
-  // Mini toolbar should only be visible for the inactive contents
-  // container view or both depending on configuration.
-  mini_toolbar_->UpdateState(is_active);
-  // Scrim should only be allowed to show the scrim for inactive contents
-  // container view.
-  inactive_split_scrim_view_->SetVisible(!is_active && show_scrim);
 }
 
 void ContentsContainerView::UpdateBorderRoundedCorners() {
-  constexpr gfx::RoundedCornersF kContentUpperRoundedCorners =
-      gfx::RoundedCornersF{kContentCornerRadius, kContentCornerRadius, 0, 0};
-  constexpr gfx::RoundedCornersF kContentLowerRoundedCorners =
-      gfx::RoundedCornersF{0, 0, kContentCornerRadius, kContentCornerRadius};
-
-  auto radii = new_tab_footer_view_ && new_tab_footer_view_->GetVisible()
-                   ? kContentUpperRoundedCorners
-                   : kContentRoundedCorners;
-
-  contents_view_->holder()->SetCornerRadii(radii);
-
-  if (new_tab_footer_view_) {
-    new_tab_footer_view_->holder()->SetCornerRadii(kContentLowerRoundedCorners);
-  }
-
-  if (contents_scrim_view_->layer()->rounded_corner_radii() !=
-      kContentRoundedCorners) {
-    contents_scrim_view_->SetRoundedCorners(kContentRoundedCorners);
-  }
+  return;
 }
 
 void ContentsContainerView::ClearBorderRoundedCorners() {
@@ -220,13 +145,6 @@ views::ProposedLayout ContentsContainerV
   layouts.child_layouts.emplace_back(
       contents_view_.get(), contents_view_->GetVisible(), contents_rect);
 
-#if BUILDFLAG(ENABLE_GLIC)
-  if (glic_border_) {
-    layouts.child_layouts.emplace_back(
-        glic_border_.get(), glic_border_->GetVisible(), contents_bounds);
-  }
-#endif
-
   // The scrim view should cover the entire contents bounds.
   CHECK(contents_scrim_view_);
   layouts.child_layouts.emplace_back(contents_scrim_view_.get(),
@@ -240,29 +158,6 @@ views::ProposedLayout ContentsContainerV
                                        contents_bounds);
   }
 
-  // Actor Overlay view bounds are the same as the contents view.
-  if (actor_overlay_view_) {
-    layouts.child_layouts.emplace_back(actor_overlay_view_.get(),
-                                       actor_overlay_view_->GetVisible(),
-                                       contents_rect, size_bounds);
-  }
-
-  if (mini_toolbar_) {
-    // |mini_toolbar_| should be offset in the bottom right corner, overlapping
-    // the outline.
-    gfx::Size mini_toolbar_size = mini_toolbar_->GetPreferredSize(
-        views::SizeBounds(width - kContentOutlineCornerRadius, height));
-    const int offset_x =
-        width - mini_toolbar_size.width() + (kContentOutlineThickness / 2.0f);
-    const int offset_y =
-        height - mini_toolbar_size.height() + (kContentOutlineThickness / 2.0f);
-    const gfx::Rect mini_toolbar_rect =
-        gfx::Rect(offset_x, offset_y, mini_toolbar_size.width(),
-                  mini_toolbar_size.height());
-    layouts.child_layouts.emplace_back(
-        mini_toolbar_.get(), mini_toolbar_->GetVisible(), mini_toolbar_rect);
-  }
-
   layouts.host_size = gfx::Size(width, height);
   return layouts;
 }
--- a/chrome/browser/ui/views/frame/contents_container_view.h
+++ b/chrome/browser/ui/views/frame/contents_container_view.h
@@ -11,13 +11,8 @@
 
 class BrowserView;
 class ContentsWebView;
-class MultiContentsViewMiniToolbar;
 class ScrimView;
 
-namespace glic {
-class GlicBorderView;
-}  // namespace glic
-
 namespace new_tab_footer {
 class NewTabFooterWebView;
 }  // namespace new_tab_footer
@@ -33,10 +28,7 @@ class ContentsContainerView : public vie
   ~ContentsContainerView() override = default;
 
   ContentsWebView* GetContentsView() { return contents_view_; }
-  MultiContentsViewMiniToolbar* GetMiniToolbar() { return mini_toolbar_; }
   ScrimView* GetContentsScrimView() { return contents_scrim_view_; }
-  views::View* GetActorOverlayView() { return actor_overlay_view_; }
-  glic::GlicBorderView* GetGlicBorderView() { return glic_border_; }
   new_tab_footer::NewTabFooterWebView* GetNewTabFooterView() {
     return new_tab_footer_view_;
   }
@@ -74,15 +66,6 @@ class ContentsContainerView : public vie
   // Scrim view shown on the inactive side of a split view when the omnibox is
   // focused or site permissions dialogs are showing.
   raw_ptr<ScrimView> inactive_split_scrim_view_ = nullptr;
-
-  // The view that contains the Glic Actor Overlay. The Actor Overlay is a UI
-  // overlay that is shown on top of the web contents.
-  raw_ptr<views::View> actor_overlay_view_ = nullptr;
-
-  // The glic browser view that renders around the web contents area.
-  raw_ptr<glic::GlicBorderView> glic_border_ = nullptr;
-
-  raw_ptr<MultiContentsViewMiniToolbar> mini_toolbar_ = nullptr;
 };
 
 #endif  // CHROME_BROWSER_UI_VIEWS_FRAME_CONTENTS_CONTAINER_VIEW_H_
--- a/chrome/browser/ui/browser_window/internal/browser_window_features.cc
+++ b/chrome/browser/ui/browser_window/internal/browser_window_features.cc
@@ -493,26 +493,6 @@ void BrowserWindowFeatures::InitPostBrow
   // The controller relies on performance manager which isn't initialized in
   // some unit tests without browser view.
   if (browser_view->GetIsNormalType()) {
-#if BUILDFLAG(ENABLE_GLIC)
-    glic::GlicKeyedService* glic_service =
-        glic::GlicKeyedService::Get(browser_view->GetProfile());
-    if (glic_service) {
-      glic_button_controller_ = std::make_unique<glic::GlicButtonController>(
-          browser_view->GetProfile(),
-          browser_view->tab_strip_region_view()->GetTabStripActionContainer(),
-          glic_service);
-
-      if (features::kGlicActorUiTaskIcon.Get() &&
-          browser_->GetProfile()->IsRegularProfile()) {
-        glic_actor_task_icon_controller_ =
-            std::make_unique<tabs::GlicActorTaskIconController>(
-                browser_->GetProfile(), browser_view->tab_strip_region_view()
-                                            ->GetTabStripActionContainer());
-      }
-    }
-
-#endif  // BUILDFLAG(ENABLE_GLIC)
-
     memory_saver_opt_in_iph_controller_ =
         std::make_unique<MemorySaverOptInIPHController>(
             browser_view->browser());
@@ -522,14 +502,6 @@ void BrowserWindowFeatures::InitPostBrow
           std::make_unique<media_router::CastBrowserController>(
               browser_view->browser());
     }
-
-    if (features::kGlicActorUiOverlay.Get()) {
-      // TODO(crbug.com/433999185): Handle split view.
-      actor_overlay_window_controller_ =
-          std::make_unique<actor::ui::ActorOverlayWindowController>(
-              browser_view->GetActiveContentsContainerView()
-                  ->GetActorOverlayView());
-    }
   }
 
 #if !BUILDFLAG(IS_CHROMEOS)
--- a/chrome/browser/ui/views/frame/multi_contents_drop_target_view.cc
+++ b/chrome/browser/ui/views/frame/multi_contents_drop_target_view.cc
@@ -35,10 +35,10 @@
 
 namespace {
 
-constexpr float kInnerCornerRadius = 6;
-constexpr int kOuterPadding = 8;
+constexpr float kInnerCornerRadius = 0;
+constexpr int kOuterPadding = 0;
 constexpr int kIconSize = 24;
-constexpr int kAnimationDurationMs = 450;
+constexpr int kAnimationDurationMs = 300;
 
 }  // namespace
 
@@ -60,13 +60,8 @@ MultiContentsDropTargetView::MultiConten
           views::FlexSpecification(views::MinimumFlexSizeRule::kScaleToZero,
                                    views::MaximumFlexSizeRule::kUnbounded));
 
-  SetBackground(views::CreateSolidBackground(ui::kColorPrimaryBackground));
-
   auto inner_container = std::make_unique<views::View>();
 
-  inner_container->SetBackground(views::CreateRoundedRectBackground(
-      ui::kColorSysSurface3, kInnerCornerRadius));
-
   inner_container->SetLayoutManager(std::make_unique<views::FlexLayout>())
       ->SetOrientation(views::LayoutOrientation::kVertical)
       .SetMainAxisAlignment(views::LayoutAlignment::kCenter)
@@ -169,7 +164,7 @@ bool MultiContentsDropTargetView::Should
 
 void MultiContentsDropTargetView::OnThemeChanged() {
   views::View::OnThemeChanged();
-  SkColor primary_color = GetColorProvider()->GetColor(ui::kColorSysPrimary);
+  SkColor primary_color = GetColorProvider()->GetColor(ui::kColorMenuIcon);
   ui::ImageModel icon_image_model =
       ui::ImageModel::FromVectorIcon(kAddCircleIcon, primary_color, kIconSize);
   icon_view_->SetImage(icon_image_model);
--- a/components/omnibox/common/omnibox_features.cc
+++ b/components/omnibox/common/omnibox_features.cc
@@ -380,7 +380,7 @@ BASE_FEATURE(kPreconnectNonSearchOmnibox
 // "invisible focus".
 BASE_FEATURE(kOmniboxRestoreInvisibleFocusOnly,
              "OmniboxRestoreInvisibleFocusOnly",
-             DISABLED);
+             ENABLED);
 
 // Enabls adding an aim shortcut in the typed state.
 BASE_FEATURE(kOmniboxAimShortcutTypedState,
--- a/chrome/browser/ui/views/frame/browser_view_layout.cc
+++ b/chrome/browser/ui/views/frame/browser_view_layout.cc
@@ -824,9 +824,6 @@ void BrowserViewLayout::LayoutContentsCo
       CalculateContentsContainerLayout(available_bounds);
   const bool is_in_split = delegate_->IsActiveTabSplit();
 
-  if (is_in_split) {
-    UpdateSplitViewInsets();
-  }
   contents_container_->SetBoundsRect(layout_result.contents_container_bounds);
 
   if (unified_side_panel_) {
@@ -848,35 +845,6 @@ void BrowserViewLayout::LayoutContentsCo
     left_aligned_side_panel_separator_->SetBoundsRect(
         layout_result.separator_bounds);
   }
-
-  if (side_panel_rounded_corner_) {
-    SetViewVisibility(side_panel_rounded_corner_,
-                      layout_result.side_panel_visible && !is_in_split);
-    if (layout_result.side_panel_visible) {
-      // This can return nullptr when there is no Widget (for context, see
-      // http://crbug.com/40178332). The nullptr dereference does not always
-      // crash due to compiler optimizations, so CHECKing here ensures we crash.
-      CHECK(side_panel_rounded_corner_->GetLayoutProvider());
-      // Adjust the rounded corner bounds based on the side panel bounds.
-      const float corner_radius =
-          side_panel_rounded_corner_->GetLayoutProvider()
-              ->GetCornerRadiusMetric(
-                  views::ShapeContextTokens::kSidePanelPageContentRadius);
-      const float corner_size = corner_radius + views::Separator::kThickness;
-      if (layout_result.contents_container_after_side_panel) {
-        side_panel_rounded_corner_->SetBounds(
-            layout_result.side_panel_bounds.right(),
-            layout_result.side_panel_bounds.y() - views::Separator::kThickness,
-            corner_size, corner_size);
-      } else {
-        side_panel_rounded_corner_->SetBounds(
-            layout_result.side_panel_bounds.x() - corner_radius -
-                views::Separator::kThickness,
-            layout_result.side_panel_bounds.y() - views::Separator::kThickness,
-            corner_size, corner_size);
-      }
-    }
-  }
 }
 
 void BrowserViewLayout::UpdateTopContainerBounds(
@@ -988,27 +956,5 @@ bool BrowserViewLayout::IsInfobarVisible
 // no toolbar or presence of infobar. Similarly the insets for the left and
 // right of the split view is determined by the side panel.
 void BrowserViewLayout::UpdateSplitViewInsets() {
-  SidePanel* side_panel = views::AsViewClass<SidePanel>(unified_side_panel_);
-  bool has_side_panel = side_panel->GetVisible();
-  bool is_right_aligned = side_panel->IsRightAligned();
-  bool is_in_full_screen = browser_view_->IsFullscreen();
-  bool has_infobar = infobar_container_->GetVisible();
-
-  CHECK(multi_contents_view_);
-
-  multi_contents_view_->start_contents_view_inset()
-      .set_left(has_side_panel && !is_right_aligned
-                    ? 0
-                    : MultiContentsView::kSplitViewContentInset)
-      .set_top(!is_in_full_screen && !has_infobar
-                   ? 0
-                   : MultiContentsView::kSplitViewContentInset);
-
-  multi_contents_view_->end_contents_view_inset()
-      .set_right(has_side_panel && is_right_aligned
-                     ? 0
-                     : MultiContentsView::kSplitViewContentInset)
-      .set_top(!is_in_full_screen && !has_infobar
-                   ? 0
-                   : MultiContentsView::kSplitViewContentInset);
+  return;
 }
