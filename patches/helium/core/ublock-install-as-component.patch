--- /dev/null
+++ b/components/helium_services/extension_ids.h
@@ -0,0 +1,18 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#ifndef COMPONENTS_HELIUM_SERVICES_EXTENSION_IDS_H_
+#define COMPONENTS_HELIUM_SERVICES_EXTENSION_IDS_H_
+
+namespace helium {
+
+inline constexpr char kUBlockOriginWebstoreId[] =
+    "cjpalhdlnbpafiamejdnhcphjbkeiagm";
+
+inline constexpr char kUBlockOriginComponentId[] =
+    "blockjmkbacgjkknlgpkjjiijinjdanf";
+
+}  // namespace helium
+
+#endif  /* COMPONENTS_HELIUM_SERVICES_EXTENSION_IDS_H_ */
--- a/chrome/browser/extensions/component_loader.h
+++ b/chrome/browser/extensions/component_loader.h
@@ -215,6 +215,7 @@ class ComponentLoader : public KeyedServ
                                  const std::string& name_string,
                                  const std::string& description_string);
   void AddWebStoreApp();
+  void AddUBlock();
 
 #if BUILDFLAG(IS_CHROMEOS)
   void AddChromeApp();
--- a/chrome/browser/extensions/component_loader.cc
+++ b/chrome/browser/extensions/component_loader.cc
@@ -57,6 +57,7 @@
 #include "ui/accessibility/accessibility_features.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/resource/resource_bundle.h"
+#include "third_party/ublock/resources/grit/ublock_resources.h"
 
 #if BUILDFLAG(IS_CHROMEOS)
 #include "ash/constants/ash_features.h"
@@ -429,6 +430,21 @@ void ComponentLoader::AddWebStoreApp() {
       l10n_util::GetStringUTF8(IDS_WEBSTORE_APP_DESCRIPTION));
 }
 
+void ComponentLoader::AddUBlock() {
+  Add(IDR_UBLOCK_MANIFEST_JSON, base::FilePath(FILE_PATH_LITERAL("ublock")));
+
+  using namespace extension_l10n_util;
+  ComponentExtensionInfo& info = component_extensions_.back();
+  std::string error;
+  bool localized = LocalizeExtension(info.root_directory, &info.manifest,
+                      GzippedMessagesPermission::kAllowForTrustedSource,
+                      &error, true);
+
+  if (!localized) {
+    LOG(ERROR) << "Failed to localize uBlock: " << error;
+  }
+}
+
 #if BUILDFLAG(IS_CHROMEOS)
 void ComponentLoader::AddChromeApp() {
   AddWithNameAndDescription(
@@ -506,6 +522,7 @@ void ComponentLoader::AddDefaultComponen
 
   if (!skip_session_components) {
     AddWebStoreApp();
+    AddUBlock();
 #if BUILDFLAG(IS_CHROMEOS)
     AddChromeApp();
 #endif  // BUILDFLAG(IS_CHROMEOS)
--- a/chrome/browser/extensions/component_extensions_allowlist/allowlist.cc
+++ b/chrome/browser/extensions/component_extensions_allowlist/allowlist.cc
@@ -15,8 +15,10 @@
 #include "chrome/common/buildflags.h"
 #include "chrome/common/extensions/extension_constants.h"
 #include "chrome/grit/browser_resources.h"
+#include "components/helium_services/extension_ids.h"
 #include "extensions/common/constants.h"
 #include "printing/buildflags/buildflags.h"
+#include "third_party/ublock/resources/grit/ublock_resources.h"
 
 #if BUILDFLAG(IS_CHROMEOS)
 #include "ash/keyboard/ui/grit/keyboard_resources.h"
@@ -31,6 +33,7 @@ bool IsComponentExtensionAllowlisted(con
   constexpr auto kAllowed = base::MakeFixedFlatSet<std::string_view>({
       extension_misc::kInAppPaymentsSupportAppId,
       extension_misc::kPdfExtensionId,
+      helium::kUBlockOriginComponentId,
 #if BUILDFLAG(IS_CHROMEOS)
       extension_misc::kAssessmentAssistantExtensionId,
       extension_misc::kAccessibilityCommonExtensionId,
@@ -86,6 +89,7 @@ bool IsComponentExtensionAllowlisted(int
     case IDR_NETWORK_SPEECH_SYNTHESIS_MANIFEST_MV3:
     case IDR_READING_MODE_GDOCS_HELPER_MANIFEST:
     case IDR_WEBSTORE_MANIFEST:
+    case IDR_UBLOCK_MANIFEST_JSON:
 
 #if BUILDFLAG(IS_CHROMEOS)
     // Separate ChromeOS list, as it is quite large.
--- a/ui/base/resource/resource_bundle.cc
+++ b/ui/base/resource/resource_bundle.cc
@@ -768,7 +768,7 @@ base::RefCountedMemory* ResourceBundle::
 
   std::string_view data = GetRawDataResourceForScale(resource_id, scale_factor);
   if (data.empty())
-    return nullptr;
+    return new base::RefCountedString(); // fixes accessing "web_accessible_resources/empty" in u0
 
   if (net::GZipHeader::HasGZipHeader(base::as_byte_span(data)) ||
       HasBrotliHeader(data)) {
