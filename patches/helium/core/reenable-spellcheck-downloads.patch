--- a/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
+++ b/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
@@ -22,8 +22,10 @@
 #include "base/task/thread_pool.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "build/build_config.h"
+#include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/spellchecker/spellcheck_service.h"
 #include "chrome/common/chrome_paths.h"
+#include "components/helium_services/helium_services_helpers.h"
 #include "components/spellcheck/browser/spellcheck_platform.h"
 #include "components/spellcheck/common/spellcheck_common.h"
 #include "components/spellcheck/common/spellcheck_features.h"
@@ -276,15 +278,26 @@ GURL SpellcheckHunspellDictionary::GetDi
   std::string bdict_file = dictionary_file_.path.BaseName().MaybeAsASCII();
   DCHECK(!bdict_file.empty());
 
-  static const char kDownloadServerUrl[] =
-      "trk:173:https://redirector.gvt1.com/edgedl/chrome/dict/";
+  if (browser_context_) {
+    const Profile* profile = Profile::FromBrowserContext(browser_context_);
+    if (!profile) {
+      goto fail;
+    }
+
+    const PrefService* prefs = profile->GetPrefs();
+    if (!prefs) {
+      goto fail;
+    }
+
+    return helium::GetSpellcheckURL(*prefs)
+            .Resolve(bdict_file);
+  }
 
-  return GURL(std::string(kDownloadServerUrl) +
-              base::ToLowerASCII(bdict_file));
+fail:
+  return GURL("https://failed-getting-spellcheck.qjz9zk/");
 }
 
 void SpellcheckHunspellDictionary::DownloadDictionary(GURL url) {
-  return;
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK(browser_context_);
 
--- a/components/helium_services/helium_services_helpers.cc
+++ b/components/helium_services/helium_services_helpers.cc
@@ -66,6 +66,11 @@ bool ShouldAccessExtensionService(const
             prefs.GetBoolean(prefs::kHeliumExtProxyEnabled);
 }
 
+bool ShouldAccessDictionaryService(const PrefService& prefs) {
+    return ShouldAccessServices(prefs) &&
+            prefs.GetBoolean(prefs::kHeliumSpellcheckEnabled);
+}
+
 bool ShouldFetchBangs(const PrefService& prefs) {
     return ShouldAccessServices(prefs) &&
             prefs.GetBoolean(prefs::kHeliumBangsEnabled);
@@ -88,6 +93,14 @@ GURL GetWebstoreSnippetURL(const PrefSer
         base::StringPrintf("/ext/cws_snippet?id=%s", id));
 }
 
+GURL GetSpellcheckURL(const PrefService& prefs) {
+    if (!ShouldAccessDictionaryService(prefs)) {
+        return GetDummyURL();
+    }
+
+    return GetServicesBaseURL(prefs).Resolve("/dict/");
+}
+
 void ConfigurePrefChangeRegistrarFor(std::string_view pref_name,
     PrefChangeRegistrar& registrar, const base::RepeatingClosure& observer) {
   registrar.Add(prefs::kHeliumServicesEnabled, observer);
--- a/components/helium_services/helium_services_helpers.h
+++ b/components/helium_services/helium_services_helpers.h
@@ -24,6 +24,7 @@ COMPONENT_EXPORT(HELIUM) GURL GetService
 COMPONENT_EXPORT(HELIUM) GURL GetDummyURL();
 COMPONENT_EXPORT(HELIUM) GURL GetExtensionUpdateURL(const PrefService& prefs);
 COMPONENT_EXPORT(HELIUM) GURL GetWebstoreSnippetURL(const PrefService& prefs, std::string_view id);
+COMPONENT_EXPORT(HELIUM) GURL GetSpellcheckURL(const PrefService& prefs);
 COMPONENT_EXPORT(HELIUM) std::optional<GURL> GetValidUserOverridenURL(std::string_view user_url_);
 COMPONENT_EXPORT(HELIUM) void ConfigurePrefChangeRegistrarFor(std::string_view pref_name,
                             PrefChangeRegistrar& registrar, const base::RepeatingClosure& observer);
--- a/components/helium_services/pref_names.h
+++ b/components/helium_services/pref_names.h
@@ -27,6 +27,9 @@ inline constexpr char kHeliumExtProxyEna
 inline constexpr char kHeliumBangsEnabled[] =
     "helium.services.bangs";
 
+inline constexpr char kHeliumSpellcheckEnabled[] =
+    "helium.services.spellcheck_files";
+
 }  // namespace prefs
 
 #endif  // COMPONENTS_HELIUM_SERVICES_PREF_NAMES_H_
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -8193,6 +8193,8 @@ static_library("browser") {
     deps += [
       "//components/spellcheck/browser",
       "//components/spellcheck/common",
+      "//components/helium_services",
+      "//chrome/browser/profiles:profile",
     ]
 
     if (!is_android) {
--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -354,6 +354,8 @@ const PrefsUtil::TypedPrefMap& PrefsUtil
       settings_api::PrefType::kBoolean;
   (*s_allowlist)[::prefs::kHeliumBangsEnabled] =
       settings_api::PrefType::kBoolean;
+  (*s_allowlist)[::prefs::kHeliumSpellcheckEnabled] =
+      settings_api::PrefType::kBoolean;
   (*s_allowlist)[::prefs::kHeliumServicesOrigin] =
       settings_api::PrefType::kString;
 
--- a/chrome/browser/ui/browser_ui_prefs.cc
+++ b/chrome/browser/ui/browser_ui_prefs.cc
@@ -198,6 +198,7 @@ void RegisterBrowserUserPrefs(user_prefs
     registry->RegisterBooleanPref(prefs::kHeliumServicesEnabled, true);
     registry->RegisterBooleanPref(prefs::kHeliumBangsEnabled, true);
     registry->RegisterBooleanPref(prefs::kHeliumExtProxyEnabled, true);
+    registry->RegisterBooleanPref(prefs::kHeliumSpellcheckEnabled, true);
     registry->RegisterStringPref(prefs::kHeliumServicesOrigin, "");
     registry->RegisterBooleanPref(prefs::kHeliumDidOnboarding, false);
     registry->RegisterBooleanPref(prefs::kHeliumServicesConsented, false);
--- a/chrome/browser/resources/settings/privacy_page/services_page.html
+++ b/chrome/browser/resources/settings/privacy_page/services_page.html
@@ -22,6 +22,13 @@
                 label="$i18n{heliumExtProxyToggle}"
                 sub-label="$i18n{heliumExtProxyToggleDescription}">
             </settings-toggle-button>
+            <if expr="use_renderer_spellchecker">
+                <settings-toggle-button id="spellcheckToggleButton"
+                    pref="{{prefs.helium.services.spellcheck_files}}"
+                    label="$i18n{heliumSpellcheckToggle}"
+                    sub-label="$i18n{heliumSpellcheckToggleDescription}">
+                </settings-toggle-button>
+            </if>
         </cr-collapse>
     </div>
 </div>
--- a/chrome/app/settings_strings.grdp
+++ b/chrome/app/settings_strings.grdp
@@ -1945,6 +1945,12 @@
   <message name="IDS_SETTINGS_HELIUM_SERVICES_BANGS_TOGGLE_DESCRIPTION" desc="Description of the toggle for enabling/disabling of downloading bangs">
     Helium will fetch a list of bangs that help you browse the Internet faster, such as !w or !gh. When disabled, bangs will not work.
   </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_SPELLCHECK_TOGGLE" desc="Toggle for enabling/disabling of downloading spellcheck files">
+    Allow downloading dictionary files for spell checking
+  </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_SPELLCHECK_TOGGLE_DESCRIPTION" desc="Description of the for enabling/disabling of downloading spellcheck files">
+    Helium will fetch dictionary files used for spell checking when requested. When disabled, spell checking will not work.
+  </message>
   <message name="IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE" desc="Text input for overriding the Helium services server">
     Use your own instance of Helium services
   </message>
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -1952,6 +1952,9 @@ void AddPrivacyStrings(content::WebUIDat
       {"heliumBangsToggle", IDS_SETTINGS_HELIUM_SERVICES_BANGS_TOGGLE},
       {"heliumBangsToggleDescription",
         IDS_SETTINGS_HELIUM_SERVICES_BANGS_TOGGLE_DESCRIPTION},
+      {"heliumSpellcheckToggle", IDS_SETTINGS_HELIUM_SERVICES_SPELLCHECK_TOGGLE},
+      {"heliumSpellcheckToggleDescription",
+        IDS_SETTINGS_HELIUM_SERVICES_SPELLCHECK_TOGGLE_DESCRIPTION},
       {"heliumExtProxyToggle",
         IDS_SETTINGS_HELIUM_SERVICES_EXT_PROXY_TOGGLE},
       {"heliumExtProxyToggleDescription",
--- a/chrome/common/features.gni
+++ b/chrome/common/features.gni
@@ -10,6 +10,7 @@ import("//components/compose/features.gn
 import("//components/safe_browsing/buildflags.gni")
 import("//components/sharing_message/buildflags.gni")
 import("//components/signin/features.gni")
+import("//components/spellcheck/spellcheck_build_features.gni")
 import("//components/supervised_user/buildflags.gni")
 import("//content/public/common/features.gni")
 import("//crypto/features.gni")
@@ -103,4 +104,5 @@ chrome_grit_defines = [
   "optimize_webui=$optimize_webui",
   "chrome_root_store_cert_management_ui=$chrome_root_store_cert_management_ui",
   "use_nss_certs=$use_nss_certs",
+  "use_renderer_spellchecker=$use_renderer_spellchecker"
 ]
