--- a/chrome/browser/extensions/chrome_extension_registrar_delegate.cc
+++ b/chrome/browser/extensions/chrome_extension_registrar_delegate.cc
@@ -12,6 +12,7 @@
 #include "base/metrics/histogram_functions.h"
 #include "base/metrics/histogram_macros.h"
 #include "base/notimplemented.h"
+#include "base/task/thread_pool.h"
 #include "chrome/browser/extensions/component_loader.h"
 #include "chrome/browser/extensions/corrupted_extension_reinstaller.h"
 #include "chrome/browser/extensions/data_deleter.h"
@@ -31,6 +32,9 @@
 #include "chrome/browser/ui/webui/favicon_source.h"
 #include "chrome/common/webui_url_constants.h"
 #include "components/favicon_base/favicon_url_parser.h"
+#include "components/helium_services/extension_ids.h"
+#include "components/value_store/value_store.h"
+#include "extensions/browser/api/storage/storage_frontend.h"
 #include "extensions/browser/delayed_install_manager.h"
 #include "extensions/browser/disable_reason.h"
 #include "extensions/browser/extension_file_task_runner.h"
@@ -248,7 +252,85 @@ void ChromeExtensionRegistrarDelegate::P
     }
   }
 
-  DataDeleter::StartDeleting(profile_, extension.get(), subtask_done_callback);
+  ChromeExtensionRegistrarDelegate::MaybeMigrateUBlockPrefs(
+    extension, base::BindOnce([](Profile* profile,
+                                 scoped_refptr<const Extension> extension,
+                                 base::OnceClosure cb) {
+      content::GetUIThreadTaskRunner({})->PostTask(FROM_HERE,
+        base::BindOnce(&DataDeleter::StartDeleting,
+                       profile, base::RetainedRef(extension),
+                       std::move(cb)));
+    }, profile_, extension, std::move(subtask_done_callback)));
+}
+
+void ChromeExtensionRegistrarDelegate::MaybeMigrateUBlockPrefs(
+      scoped_refptr<const Extension> extension,
+      base::OnceClosure callback) {
+  StorageFrontend* frontend = StorageFrontend::Get(profile_);
+  scoped_refptr<const Extension> component = registry_->GetExtensionById(
+    helium::kUBlockOriginComponentId, ExtensionRegistry::EVERYTHING);
+
+  if (!frontend || extension->id() != helium::kUBlockOriginWebstoreId || !component) {
+    if (!component) {
+      LOG(ERROR) << "component-based ublock is missing, skipping migration";
+    }
+    std::move(callback).Run();
+    return;
+  }
+
+  std::array namespaces = { settings_namespace::LOCAL,
+                            settings_namespace::SYNC };
+  base::RepeatingClosure barrier_cb =
+    base::BarrierClosure(namespaces.size(), std::move(callback));
+
+  for (settings_namespace::Namespace ns : namespaces) {
+    ValueStoreCache* store_cache = frontend->GetValueStoreCache(ns);
+    if (!store_cache) {
+      continue;
+    }
+
+    GetExtensionFileTaskRunner()->PostTask(FROM_HERE,
+      base::BindOnce(
+        &ValueStoreCache::RunWithValueStoreForExtension,
+        base::Unretained(store_cache),
+        base::BindOnce([] (base::WeakPtr<ChromeExtensionRegistrarDelegate> weak_ptr,
+                            scoped_refptr<const Extension> component,
+                            ValueStoreCache* store_cache,
+                            base::RepeatingClosure cb,
+                            value_store::ValueStore* old) {
+              store_cache->RunWithValueStoreForExtension(
+                base::BindOnce(
+                  &ChromeExtensionRegistrarDelegate::HandleUblockPrefsMigration,
+                  weak_ptr, old).Then(std::move(cb)), component);
+          }, weak_factory_.GetWeakPtr(), component, store_cache, barrier_cb),
+        extension));
+  }
+}
+
+void ChromeExtensionRegistrarDelegate::HandleUblockPrefsMigration(
+  value_store::ValueStore* old_, value_store::ValueStore* new_) {
+  if (!old_ || !new_) {
+    LOG(ERROR) << "missing old/new";
+    return;
+  }
+
+  auto oldValues = old_->Get();
+  if (!oldValues.status().ok()) {
+    LOG(ERROR) << "failed getting webstore uBlock prefs";
+    return;
+  }
+
+  auto getKeysResult = new_->GetKeys();
+  CHECK(getKeysResult.status().ok());
+
+  auto existingKeys = getKeysResult.PassSettings();
+  for (const auto [ key, value ] : oldValues.PassSettings()) {
+    if (existingKeys.Find(key)) {
+      continue;
+    }
+
+    new_->Set(value_store::ValueStore::DEFAULTS, key, value);
+  }
 }
 
 void ChromeExtensionRegistrarDelegate::DoLoadExtensionForReload(
--- a/chrome/browser/extensions/chrome_extension_registrar_delegate.h
+++ b/chrome/browser/extensions/chrome_extension_registrar_delegate.h
@@ -7,6 +7,7 @@
 
 #include "base/memory/raw_ptr.h"
 #include "base/memory/weak_ptr.h"
+#include "components/value_store/value_store.h"
 #include "extensions/browser/extension_registrar.h"
 #include "extensions/buildflags/buildflags.h"
 
@@ -51,6 +52,11 @@ class ChromeExtensionRegistrarDelegate :
   void PreUninstallExtension(scoped_refptr<const Extension> extension) override;
   void PostUninstallExtension(scoped_refptr<const Extension> extension,
                               base::OnceClosure done_callback) override;
+  void MaybeMigrateUBlockPrefs(scoped_refptr<const Extension> extension,
+                               base::OnceClosure callback);
+  void HandleUblockPrefsMigration(value_store::ValueStore* old_,
+                                  value_store::ValueStore* new_);
+
   void LoadExtensionForReload(const ExtensionId& extension_id,
                               const base::FilePath& path) override;
   void LoadExtensionForReloadWithQuietFailure(
