--- a/chrome/browser/ui/tabs/features.cc
+++ b/chrome/browser/ui/tabs/features.cc
@@ -5,6 +5,7 @@
 #include "chrome/browser/ui/tabs/features.h"
 
 #include "base/feature_list.h"
+#include "base/command_line.h"
 #include "chrome/browser/ui/ui_features.h"
 
 namespace tabs {
@@ -75,4 +76,8 @@ bool AreVerticalTabsEnabled() {
   return base::FeatureList::IsEnabled(kVerticalTabs);
 }
 
+bool AreHeliumVerticalTabsEnabled() {
+  return base::CommandLine::ForCurrentProcess()->HasSwitch("helium-vertical-tabs");
+}
+
 }  // namespace tabs
--- a/chrome/browser/ui/tabs/features.h
+++ b/chrome/browser/ui/tabs/features.h
@@ -35,6 +35,7 @@ BASE_DECLARE_FEATURE(kVerticalTabs);
 extern bool CanShowTabSearchPositionSetting();
 extern bool AreTabGroupShortcutsEnabled();
 extern bool AreVerticalTabsEnabled();
+extern bool AreHeliumVerticalTabsEnabled();
 
 }  // namespace tabs
 
--- a/chrome/browser/ui/tabs/tab_style.cc
+++ b/chrome/browser/ui/tabs/tab_style.cc
@@ -169,8 +169,10 @@ SkColor TabStyle::GetTabBackgroundColor(
       return color_provider.GetColor(kSelectedColorIds[hovered][frame_active]);
     }
     case TabStyle::TabSelectionState::kInactive: {
-      constexpr std::array<std::array<ui::ColorId, 2>, 2> kInactiveColorIds = {
+      std::array<std::array<ui::ColorId, 2>, 2> kInactiveColorIds = {
           {{kColorTabBackgroundInactiveFrameInactive,
+            tabs::AreHeliumVerticalTabsEnabled() ?
+            kColorTabBackgroundInactiveFrameInactive :
             kColorTabBackgroundInactiveFrameActive},
            {kColorTabBackgroundInactiveHoverFrameInactive,
             kColorTabBackgroundInactiveHoverFrameActive}}};
--- a/chrome/browser/ui/views/frame/browser_view.h
+++ b/chrome/browser/ui/views/frame/browser_view.h
@@ -145,7 +145,7 @@ class BrowserView : public BrowserWindow
 
  public:
   // The width of the vertical tab strip.
-  static constexpr int kVerticalTabStripWidth = 240;
+  static constexpr int kVerticalTabStripWidth = 270;
 
   explicit BrowserView(std::unique_ptr<Browser> browser);
   BrowserView(const BrowserView&) = delete;
--- a/chrome/browser/ui/views/frame/browser_view_layout.cc
+++ b/chrome/browser/ui/views/frame/browser_view_layout.cc
@@ -540,10 +540,22 @@ void BrowserViewLayout::LayoutTabStripRe
   if (web_app_frame_toolbar_) {
     tab_strip_region_bounds.Inset(gfx::Insets::TLBR(
         0, 0, 0, web_app_frame_toolbar_->GetPreferredSize().width()));
+  } else if (tabs::AreHeliumVerticalTabsEnabled()) {
+    // if there's anything to the left (e.g. macOS window buttons), offset tab strip.
+    int top_offset = tab_strip_region_bounds.x() != 0 ? tab_strip_region_bounds.height() : 0;
+    tab_strip_region_bounds = gfx::Rect(
+      0, top_offset,
+      BrowserView::kVerticalTabStripWidth, available_bounds.height() - top_offset
+    );
   }
 
   if (tabs::AreVerticalTabsEnabled()) {
     SetViewVisibility(tab_strip_region_view_, false);
+  } else if (tabs::AreHeliumVerticalTabsEnabled()) {
+    SetViewVisibility(tab_strip_region_view_, true);
+    available_bounds.set_x(available_bounds.x() +
+                         BrowserView::kVerticalTabStripWidth);
+    tab_strip_region_view_->SetBoundsRect(tab_strip_region_bounds);
   } else {
     SetViewVisibility(tab_strip_region_view_, true);
     tab_strip_region_view_->SetBoundsRect(tab_strip_region_bounds);
@@ -572,7 +584,7 @@ void BrowserViewLayout::LayoutToolbar(gf
   bool toolbar_visible = delegate_->IsToolbarVisible();
   SetViewVisibility(toolbar_, toolbar_visible);
 
-  if (tabs::AreVerticalTabsEnabled()) {
+  if (tabs::AreVerticalTabsEnabled() || tabs::AreHeliumVerticalTabsEnabled()) {
     // When vertical tabs is enabled, the top element becomes the toolbar.
     // Because of this, it must now be aware of the location of the caption
     // buttons. We can reuse the calculation use by the TabStripRegionView to
@@ -580,6 +592,7 @@ void BrowserViewLayout::LayoutToolbar(gf
     // caption button location directly.
     gfx::Rect toolbar_bounds(
         delegate_->GetBoundsForTabStripRegionInBrowserView());
+
     toolbar_bounds.set_x(available_bounds.x());
     toolbar_bounds.set_width(toolbar_bounds.width() -
                              BrowserView::kVerticalTabStripWidth);
@@ -702,7 +715,7 @@ BrowserViewLayout::CalculateContentsCont
   contents_container_bounds.set_height(available_bounds.height() -
                                        available_bounds.y());
   int vertical_tab_offset = 0;
-  if (tabs::AreVerticalTabsEnabled()) {
+  if (tabs::AreVerticalTabsEnabled() || tabs::AreHeliumVerticalTabsEnabled()) {
     vertical_tab_offset = BrowserView::kVerticalTabStripWidth;
     contents_container_bounds.set_width(available_bounds.width() -
                                         vertical_tab_offset);
--- a/chrome/browser/ui/views/frame/tab_strip_region_view.cc
+++ b/chrome/browser/ui/views/frame/tab_strip_region_view.cc
@@ -18,6 +18,7 @@
 #include "chrome/browser/ui/tabs/features.h"
 #include "chrome/browser/ui/tabs/tab_strip_prefs.h"
 #include "chrome/browser/ui/ui_features.h"
+#include "chrome/browser/ui/color/chrome_color_id.h"
 #include "chrome/browser/ui/views/chrome_layout_provider.h"
 #include "chrome/browser/ui/views/commerce/product_specifications_button.h"
 #include "chrome/browser/ui/views/tab_search_bubble_host.h"
@@ -114,6 +115,10 @@ TabStripRegionView::TabStripRegionView(s
       this, views::kCascadingBackgroundColor,
       kColorTabBackgroundInactiveFrameInactive);
 
+  if (tabs::AreHeliumVerticalTabsEnabled()) {
+    SetBackground(views::CreateSolidBackground(kColorTabBackgroundInactiveFrameInactive));
+  }
+
   SetLayoutManager(std::make_unique<views::FlexLayout>())
       ->SetOrientation(views::LayoutOrientation::kHorizontal);
 
@@ -129,6 +134,7 @@ TabStripRegionView::TabStripRegionView(s
   std::unique_ptr<TabStripActionContainer> tab_strip_action_container;
   std::unique_ptr<ProductSpecificationsButton> product_specifications_button;
   if (browser &&
+      !tabs::AreHeliumVerticalTabsEnabled() &&
       !base::CommandLine::ForCurrentProcess()->HasSwitch("remove-tabsearch-button") &&
       (browser->GetType() == BrowserWindowInterface::Type::TYPE_NORMAL)) {
     if (features::HasTabSearchToolbarButton()) {
@@ -181,7 +187,7 @@ TabStripRegionView::TabStripRegionView(s
     }
   }
 
-  if (base::FeatureList::IsEnabled(tabs::kScrollableTabStrip)) {
+  if (base::FeatureList::IsEnabled(tabs::kScrollableTabStrip) || tabs::AreHeliumVerticalTabsEnabled()) {
     std::unique_ptr<TabStripScrollContainer> scroll_container =
         std::make_unique<TabStripScrollContainer>(std::move(tab_strip));
     tab_strip_scroll_container_ = scroll_container.get();
@@ -189,7 +195,9 @@ TabStripRegionView::TabStripRegionView(s
     // Allow the |tab_strip_container_| to grow into the free space available in
     // the TabStripRegionView.
     const views::FlexSpecification tab_strip_container_flex_spec =
-        views::FlexSpecification(views::LayoutOrientation::kHorizontal,
+        views::FlexSpecification(tabs::AreHeliumVerticalTabsEnabled() ?
+                                 views::LayoutOrientation::kVertical :
+                                 views::LayoutOrientation::kHorizontal,
                                  views::MinimumFlexSizeRule::kScaleToMinimum,
                                  views::MaximumFlexSizeRule::kPreferred);
     tab_strip_container_->SetProperty(views::kFlexBehaviorKey,
@@ -208,7 +216,7 @@ TabStripRegionView::TabStripRegionView(s
                                       tab_strip_container_flex_spec);
   }
 
-  if (ShouldShowNewTabButton(browser)) {
+  if (ShouldShowNewTabButton(browser) && !tabs::AreHeliumVerticalTabsEnabled()) {
     std::unique_ptr<TabStripControlButton> tab_strip_control_button =
         std::make_unique<TabStripControlButton>(
             tab_strip_->controller(),
@@ -231,17 +239,20 @@ TabStripRegionView::TabStripRegionView(s
           ui::EF_MIDDLE_MOUSE_BUTTON);
   }
 
-  reserved_grab_handle_space_ =
-      AddChildView(std::make_unique<FrameGrabHandle>());
-  reserved_grab_handle_space_->SetProperty(
-      views::kFlexBehaviorKey,
-      views::FlexSpecification(views::MinimumFlexSizeRule::kPreferred,
-                               views::MaximumFlexSizeRule::kUnbounded)
-          .WithOrder(3));
+  if (!tabs::AreHeliumVerticalTabsEnabled()) {
+    reserved_grab_handle_space_ =
+        AddChildView(std::make_unique<FrameGrabHandle>());
+    reserved_grab_handle_space_->SetProperty(
+        views::kFlexBehaviorKey,
+        views::FlexSpecification(views::MinimumFlexSizeRule::kPreferred,
+                                 views::MaximumFlexSizeRule::kUnbounded)
+            .WithOrder(3));
+  }
 
   SetProperty(views::kElementIdentifierKey, kTabStripRegionElementId);
 
-  if (browser && tab_search_container && !render_tab_search_before_tab_strip_) {
+  if (browser && tab_search_container && !render_tab_search_before_tab_strip_
+      && !tabs::AreHeliumVerticalTabsEnabled()) {
     if (product_specifications_button) {
       product_specifications_button_ =
           AddChildView(std::move(product_specifications_button));
@@ -255,6 +266,7 @@ TabStripRegionView::TabStripRegionView(s
     tab_strip_action_container_ =
         AddChildView(std::move(tab_strip_action_container));
   }
+
   UpdateTabStripMargin();
 }
 
@@ -315,7 +327,7 @@ bool TabStripRegionView::IsRectInWindowC
   // true.
   if (tab_strip_container_->HitTestRect(
           get_target_rect(tab_strip_container_))) {
-    if (base::FeatureList::IsEnabled(tabs::kScrollableTabStrip)) {
+    if (base::FeatureList::IsEnabled(tabs::kScrollableTabStrip) || tabs::AreHeliumVerticalTabsEnabled()) {
       TabStripScrollContainer* scroll_container =
           views::AsViewClass<TabStripScrollContainer>(tab_strip_container_);
 
@@ -412,7 +424,7 @@ views::View::Views TabStripRegionView::G
 // manually calculated.
 void TabStripRegionView::Layout(PassKey) {
   const bool tab_search_container_before_tab_strip =
-      tab_search_container_ && render_tab_search_before_tab_strip_;
+      tab_search_container_ && render_tab_search_before_tab_strip_ && !tabs::AreHeliumVerticalTabsEnabled();
   if (tab_search_container_before_tab_strip) {
     UpdateTabStripMargin();
   }
@@ -559,6 +571,11 @@ void TabStripRegionView::UpdateButtonBor
 }
 
 void TabStripRegionView::UpdateTabStripMargin() {
+  // Vertical tab strip has constant size defined by BrowserViewLayout.
+  if (tabs::AreHeliumVerticalTabsEnabled()) {
+    return;
+  }
+
   // The new tab button overlaps the tabstrip. Render it to a layer and adjust
   // the tabstrip right margin to reserve space for it.
   std::optional<int> tab_strip_right_margin;
--- a/chrome/browser/ui/views/tabs/tab_container_impl.cc
+++ b/chrome/browser/ui/views/tabs/tab_container_impl.cc
@@ -1648,7 +1648,7 @@ bool TabContainerImpl::ShouldTabBeVisibl
   // N.B. This is separate from the tab being potentially scrolled offscreen -
   // this solely determines whether the tab should be clipped for the
   // pre-scrolling overflow behavior.
-  if (base::FeatureList::IsEnabled(tabs::kScrollableTabStrip)) {
+  if (base::FeatureList::IsEnabled(tabs::kScrollableTabStrip) || tabs::AreHeliumVerticalTabsEnabled()) {
     return true;
   }
 
--- a/chrome/browser/ui/views/tabs/tab_strip.cc
+++ b/chrome/browser/ui/views/tabs/tab_strip.cc
@@ -177,6 +177,15 @@ class TabStrip::TabDragContextImpl : pub
 
   gfx::Size CalculatePreferredSize(
       const views::SizeBounds& available_size) const override {
+
+    int max_child_y = 0;
+    for (views::View* child : children()) {
+      if (!views::IsViewClass<TabSlotView>(child)) {
+        continue;
+      }
+      max_child_y = std::max(max_child_y, child->bounds().bottom());
+    }
+
     int max_child_x = 0;
     for (views::View* child : children()) {
       if (!views::IsViewClass<TabSlotView>(child)) {
@@ -185,7 +194,7 @@ class TabStrip::TabDragContextImpl : pub
       max_child_x = std::max(max_child_x, child->bounds().right());
     }
 
-    return gfx::Size(max_child_x, GetLayoutConstant(TAB_HEIGHT));
+    return gfx::Size(max_child_x, max_child_y);
   }
 
   bool OnMouseDragged(const ui::MouseEvent& event) override {
--- a/chrome/browser/ui/views/tabs/tab_strip_layout.cc
+++ b/chrome/browser/ui/views/tabs/tab_strip_layout.cc
@@ -10,6 +10,9 @@
 #include <optional>
 #include <set>
 
+#include "chrome/browser/ui/tabs/features.h"
+#include "chrome/browser/ui/views/frame/browser_view.h"
+#include "chrome/browser/ui/views/tabs/tab_group_underline.h" // for kStrokeThickness
 #include "chrome/browser/ui/tabs/tab_style.h"
 #include "chrome/browser/ui/views/tabs/tab_strip_layout_types.h"
 #include "components/tabs/public/split_tab_id.h"
@@ -146,6 +149,24 @@ std::pair<std::vector<gfx::Rect>, Layout
             LayoutDomain::kInactiveWidthEqualsActiveWidth};
   }
 
+  if (tabs::AreHeliumVerticalTabsEnabled()) {
+    int next_y = 0;
+    std::vector<gfx::Rect> bounds;
+
+    for (const TabWidthConstraints& tab : tabs) {
+      if (tab.get_state().IsClosed()) {
+        bounds.emplace_back(0, next_y, BrowserView::kVerticalTabStripWidth, 0);
+      } else {
+        int left_padding = tab.IsPartOfGroup() ? TabGroupUnderline::kStrokeThickness * 5 : 0;
+        bounds.emplace_back(left_padding, next_y, BrowserView::kVerticalTabStripWidth - left_padding,
+                            TabStyle::Get()->GetStandardHeight());
+        next_y += TabStyle::Get()->GetStandardHeight();
+      }
+    }
+
+    return {bounds, LayoutDomain::kInactiveWidthEqualsActiveWidth};
+  }
+
   TabSizer tab_sizer = CalculateSpaceFractionAvailable(tabs, width);
 
   int next_x = 0;
--- a/chrome/browser/ui/views/tabs/tab_strip_layout_helper.cc
+++ b/chrome/browser/ui/views/tabs/tab_strip_layout_helper.cc
@@ -278,7 +278,14 @@ TabStripLayoutHelper::CalculateIdealBoun
         TabLayoutState(open, pinned, active, slots_[i].view->split());
     TabSizeInfo size_info = slots_[i].view->GetTabSizeInfo();
 
-    tab_widths.emplace_back(state, size_info);
+    bool is_part_of_group = false;
+
+    if (slots_[i].type == TabSlotView::ViewType::kTab) {
+      Tab* tab = static_cast<Tab*>(slots_[i].view);
+      is_part_of_group = tab->GetGroupColor().has_value();
+    }
+
+    tab_widths.emplace_back(state, size_info, is_part_of_group);
   }
 
   return CalculateTabBounds(tab_widths, available_width);
--- a/chrome/browser/ui/views/tabs/tab_style_views.cc
+++ b/chrome/browser/ui/views/tabs/tab_style_views.cc
@@ -21,6 +21,7 @@
 #include "chrome/browser/ui/tabs/tab_style.h"
 #include "chrome/browser/ui/tabs/tab_types.h"
 #include "chrome/browser/ui/ui_features.h"
+#include "chrome/browser/ui/tabs/features.h"
 #include "chrome/browser/ui/views/frame/browser_non_client_frame_view.h"
 #include "chrome/browser/ui/views/frame/browser_view.h"
 #include "chrome/browser/ui/views/frame/top_container_background.h"
@@ -1046,6 +1047,8 @@ void TabStyleViewsImpl::PaintBackgroundS
 }
 
 void TabStyleViewsImpl::PaintSeparators(gfx::Canvas* canvas) const {
+  if (tabs::AreHeliumVerticalTabsEnabled()) return;
+
   const auto separator_opacities = GetSeparatorOpacities(false);
   if (!separator_opacities.left && !separator_opacities.right) {
     return;
--- a/chrome/browser/ui/views/tabs/tab_width_constraints.cc
+++ b/chrome/browser/ui/views/tabs/tab_width_constraints.cc
@@ -10,8 +10,9 @@
 #include "ui/gfx/animation/tween.h"
 
 TabWidthConstraints::TabWidthConstraints(const TabLayoutState& state,
-                                         const TabSizeInfo& size_info)
-    : state_(state), size_info_(size_info) {}
+                                         const TabSizeInfo& size_info,
+                                         const bool part_of_group)
+    : state_(state), size_info_(size_info), part_of_group_(part_of_group) {}
 
 float TabWidthConstraints::GetMinimumWidth() const {
   const float min_width = state_.active() == TabActive::kActive
@@ -38,3 +39,7 @@ float TabWidthConstraints::TransformForP
     return width;
   }
 }
+
+bool TabWidthConstraints::IsPartOfGroup() const {
+  return part_of_group_;
+}
--- a/chrome/browser/ui/views/tabs/tab_width_constraints.h
+++ b/chrome/browser/ui/views/tabs/tab_width_constraints.h
@@ -12,7 +12,8 @@
 class TabWidthConstraints {
  public:
   TabWidthConstraints(const TabLayoutState& state,
-                      const TabSizeInfo& size_info);
+                      const TabSizeInfo& size_info,
+                      const bool part_of_group);
 
   // The smallest width this tab should ever have.
   float GetMinimumWidth() const;
@@ -26,6 +27,8 @@ class TabWidthConstraints {
   // The width this tab would like to have, if space is available.
   float GetPreferredWidth() const;
 
+  bool IsPartOfGroup() const;
+
   const TabLayoutState get_state() const { return state_; }
 
  private:
@@ -34,6 +37,7 @@ class TabWidthConstraints {
 
   TabLayoutState state_;
   TabSizeInfo size_info_;
+  bool part_of_group_;
 };
 
 #endif  // CHROME_BROWSER_UI_VIEWS_TABS_TAB_WIDTH_CONSTRAINTS_H_
