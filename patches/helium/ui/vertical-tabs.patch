--- a/chrome/browser/ui/tabs/features.cc
+++ b/chrome/browser/ui/tabs/features.cc
@@ -5,6 +5,7 @@
 #include "chrome/browser/ui/tabs/features.h"
 
 #include "base/feature_list.h"
+#include "base/command_line.h"
 #include "chrome/browser/ui/ui_features.h"
 
 namespace tabs {
@@ -75,4 +76,8 @@ bool AreVerticalTabsEnabled() {
   return base::FeatureList::IsEnabled(kVerticalTabs);
 }
 
+bool AreHeliumVerticalTabsEnabled() {
+  return base::CommandLine::ForCurrentProcess()->HasSwitch("helium-vertical-tabs");
+}
+
 }  // namespace tabs
--- a/chrome/browser/ui/tabs/features.h
+++ b/chrome/browser/ui/tabs/features.h
@@ -35,6 +35,7 @@ BASE_DECLARE_FEATURE(kVerticalTabs);
 extern bool CanShowTabSearchPositionSetting();
 extern bool AreTabGroupShortcutsEnabled();
 extern bool AreVerticalTabsEnabled();
+extern bool AreHeliumVerticalTabsEnabled();
 
 }  // namespace tabs
 
--- a/chrome/browser/ui/views/frame/browser_view.h
+++ b/chrome/browser/ui/views/frame/browser_view.h
@@ -145,7 +145,7 @@ class BrowserView : public BrowserWindow
 
  public:
   // The width of the vertical tab strip.
-  static constexpr int kVerticalTabStripWidth = 240;
+  static constexpr int kVerticalTabStripWidth = 270;
 
   explicit BrowserView(std::unique_ptr<Browser> browser);
   BrowserView(const BrowserView&) = delete;
--- a/chrome/browser/ui/views/frame/browser_view_layout.cc
+++ b/chrome/browser/ui/views/frame/browser_view_layout.cc
@@ -540,10 +540,22 @@ void BrowserViewLayout::LayoutTabStripRe
   if (web_app_frame_toolbar_) {
     tab_strip_region_bounds.Inset(gfx::Insets::TLBR(
         0, 0, 0, web_app_frame_toolbar_->GetPreferredSize().width()));
+  } else if (tabs::AreHeliumVerticalTabsEnabled()) {
+    // if there's anything to the left (e.g. macOS window buttons), offset tab strip.
+    int top_offset = tab_strip_region_bounds.x() != 0 ? tab_strip_region_bounds.height() : 0;
+    tab_strip_region_bounds = gfx::Rect(
+      0, top_offset,
+      BrowserView::kVerticalTabStripWidth, available_bounds.height() - top_offset
+    );
   }
-
+
   if (tabs::AreVerticalTabsEnabled()) {
     SetViewVisibility(tab_strip_region_view_, false);
+  } else if (tabs::AreHeliumVerticalTabsEnabled()) {
+    SetViewVisibility(tab_strip_region_view_, true);
+    available_bounds.set_x(available_bounds.x() +
+                         BrowserView::kVerticalTabStripWidth);
+    tab_strip_region_view_->SetBoundsRect(tab_strip_region_bounds);
   } else {
     SetViewVisibility(tab_strip_region_view_, true);
     tab_strip_region_view_->SetBoundsRect(tab_strip_region_bounds);
@@ -572,7 +584,7 @@ void BrowserViewLayout::LayoutToolbar(gf
   bool toolbar_visible = delegate_->IsToolbarVisible();
   SetViewVisibility(toolbar_, toolbar_visible);
 
-  if (tabs::AreVerticalTabsEnabled()) {
+  if (tabs::AreVerticalTabsEnabled() || tabs::AreHeliumVerticalTabsEnabled()) {
     // When vertical tabs is enabled, the top element becomes the toolbar.
     // Because of this, it must now be aware of the location of the caption
     // buttons. We can reuse the calculation use by the TabStripRegionView to
@@ -580,6 +592,7 @@ void BrowserViewLayout::LayoutToolbar(gf
     // caption button location directly.
     gfx::Rect toolbar_bounds(
         delegate_->GetBoundsForTabStripRegionInBrowserView());
+
     toolbar_bounds.set_x(available_bounds.x());
     toolbar_bounds.set_width(toolbar_bounds.width() -
                              BrowserView::kVerticalTabStripWidth);
@@ -702,7 +715,7 @@ BrowserViewLayout::CalculateContentsCont
   contents_container_bounds.set_height(available_bounds.height() -
                                        available_bounds.y());
   int vertical_tab_offset = 0;
-  if (tabs::AreVerticalTabsEnabled()) {
+  if (tabs::AreVerticalTabsEnabled() || tabs::AreHeliumVerticalTabsEnabled()) {
     vertical_tab_offset = BrowserView::kVerticalTabStripWidth;
     contents_container_bounds.set_width(available_bounds.width() -
                                         vertical_tab_offset);
